name: Publish docs and results

on:
  workflow_run:
    workflows: [Run benchmarks...]
    types:
      - completed
      
  workflow_dispatch:

  push:
    branches: [ main ]

jobs:
  # This workflow contains a single job called "test"
  test:
    permissions:
      contents: write
  # The type of runner that the job will run on
    strategy:
      matrix:
#         os: ["ubuntu-latest", "macos-latest"]
        os: ["ubuntu-latest"]
        # python-version: ["3.7", "3.8", "3.9"]
        python-version: ["3.10"]
    runs-on: ${{ matrix.os }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout project
        uses: actions/checkout@v2

      # Install python
      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      # Install Poetry and the dependencies
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      # - name: Install dependencies
      #   if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      #   run: poetry install --no-interaction --no-root

      - name: Install package
        run: poetry install --with docs

      # - name: Print repository information using github context
      #   run: |
      #     echo "Using github context:"
      #     echo "Repository owner: ${{ github.repository_owner }}"
      #     echo "Repository name: ${{ github.event.repository.name }}"

      # - name: Print repository information using environment variables
      #   run: |
      #     echo "Using environment variables:"
      #     REPO=${GITHUB_REPOSITORY}
      #     OWNER=$(echo $REPO | cut -d'/' -f1)
      #     NAME=$(echo $REPO | cut -d'/' -f2)
      #     echo "Repository owner: $OWNER"
      #     echo "Repository name: $NAME"

      - name: Execute Test Script
        run: |
         OWNER=$(echo ${GITHUB_REPOSITORY} | cut -d'/' -f1) NAME=$(echo ${GITHUB_REPOSITORY} | cut -d'/' -f2) .venv/bin/python3 publish_results.py

      - name: Install pandoc
        run: sudo apt install pandoc

      # - name: Publish results
      #   env:
      #     SRC_FOLDER_PATH: 'results'
      #     TARGET_BRANCH: 'gh-pages'
      #   run: |
      #     files=$(find $SRC_FOLDER_PATH -type f) # get the file list
      #     git config --global user.name 'GitHub Action'
      #     git config --global user.email 'action@github.com'
      #     git fetch                         # fetch branches
      #     git checkout $TARGET_BRANCH       # checkout to your branch
      #     git checkout ${GITHUB_REF##*/} -- $files # copy files from the source branch
      #     git add -A
      #     git diff-index --quiet HEAD ||  git commit -am "deploy files"  # commit to the repository (ignore if no modification)
      #     git push origin $TARGET_BRANCH # push to remote branch

      #----------------------------------------------
      #    deploy documentation
      #----------------------------------------------  
      # - name: Create .nojekyll file.
      #   run: | 
      #     > .nojekyll 
      
      - name: Move reports to docs folder for html
        run: | 
          # cp results/results_denoising.md docs/source
          # cp results/results_detection.md docs/source
          cp results/*.md docs/source
          
      - name: Build docs
        run: |
          cd docs
          poetry run make clean
          poetry run make html 
      
      - name: Move reports to docs folder for html
        run: |
          # cd ..
          cp -r results docs/build/html
          > docs/build/html/.nojekyll
        
      - name: Deploy documentation to gh-pages branch
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: gh-pages
          FOLDER: docs/build/html
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
